using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using 北京工艺文件管理MVC.Database;
using 北京工艺文件管理MVC.Models;

namespace 北京工艺文件管理MVC.Controllers
{
    public class CraftDesignController : Controller
    {
        //
        // GET: /CraftDesign/

        public ActionResult Index()
        {
            using (Model1 model = new Model1())
            {
                //JDJS_PDMS_Department_Table depart = new JDJS_PDMS_Department_Table()
                //{
                //    CreatPersonID =1,
                //    CreatTime =DateTime .Now ,
                //    DepartmentName ="北京精雕科技集团",
                //    LastAlterPersonID =1,
                //    LastAlterTime =DateTime .Now ,
                //    ParentID =0,
                //    state ="正常"
                //};
                //model.JDJS_PDMS_Department_Table.Add(depart);
                //JDJS_PDMS_Position_Table positio = new JDJS_PDMS_Position_Table()
                //{
                //    CreatPersonID =1,
                //    CreatTime =DateTime .Now ,
                //    DepartmentID =1,
                //    LastAlterPersonID =1,
                //    LastAlterTime =DateTime .Now ,
                //    PositionName ="管理员",
                //    state ="正常"
                //};
                //model.JDJS_PDMS_Position_Table.Add(positio);
                //JDJS_PDMS_Staff_Table staff = new JDJS_PDMS_Staff_Table()
                //{
                //    CreatPersonID =1,
                //    CreatTime =DateTime .Now ,
                //    LastAlterPersonID =1,
                //    LastAlterTime =DateTime .Now ,
                //    MailBox ="jingdiao@jd.com",
                //    PassWord ="123456",
                //    PosiationID =1,
                //    StaffName ="管理员",
                //    state ="正常",
                //    Tel ="00000000000",
                //    Users ="admin"
                //};
                //model.JDJS_PDMS_Staff_Table.Add(staff);
                JDJS_PDMS_Task_Preview_Category_Table jd1 = new JDJS_PDMS_Task_Preview_Category_Table()
                {
                    CreatPersonID = 1,
                    CreatTime = DateTime.Now,
                    LastAlterPersonID = 1,
                    LastAlterTime = DateTime.Now,
                    ProcessingType = "车",
                    state = "正常"

                };
                model.JDJS_PDMS_Task_Preview_Category_Table.Add(jd1);
                JDJS_PDMS_Task_Preview_Category_Table jd2 = new JDJS_PDMS_Task_Preview_Category_Table()
                {
                    CreatPersonID = 1,
                    CreatTime = DateTime.Now,
                    LastAlterPersonID = 1,
                    LastAlterTime = DateTime.Now,
                    ProcessingType = "铣",
                    state = "正常"

                };
                model.JDJS_PDMS_Task_Preview_Category_Table.Add(jd2);
                JDJS_PDMS_Task_Preview_Category_Table jd3 = new JDJS_PDMS_Task_Preview_Category_Table()
                {
                    CreatPersonID = 1,
                    CreatTime = DateTime.Now,
                    LastAlterPersonID = 1,
                    LastAlterTime = DateTime.Now,
                    ProcessingType = "磨",
                    state = "正常"

                };
                model.JDJS_PDMS_Task_Preview_Category_Table.Add(jd3);
                model.SaveChanges();
            }
            return View();
        }

        /// <summary>
        /// 根据登录人员获取该人员负责的零件任务
        /// </summary>
        /// <returns></returns>
        public ActionResult GetTaskInfoByCraftPerson()
        {
            try
            {
                int craftPersonID = -1;
                if (int.TryParse(Session["id"].ToString(), out craftPersonID))
                {
                    var list = CraftDesignInfoManage.GetTaskInfoByCreaftPerson(0, "", craftPersonID);
                    return Json(list, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Content("系统异常，请刷新重试！");
                }
            }
            catch (Exception ex)
            {
                return Content(ex.Message);
            }
        }

        /// <summary>
        /// 接收多个任务,返回的是一个字符串列表序列化的字符串，包含每个任务接收情况，成功为ok,失败有错误信息
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult AcceptTaskMethodByCraftPerson()
        {
            try
            {
                var taskIdStr = Request["taskIdList"];//接收的任务ID列表,主键ID以英文半角逗号,隔开
                List<string> taskIdStrList = taskIdStr.Split(',').ToList();
                List<int> taskId = new List<int>();
                foreach (var item in taskIdStrList)
                {
                    int _int = -1;
                    if (int.TryParse(item, out _int))
                    {
                        taskId.Add(_int);
                    }
                }
                List<string> result = new List<string>();
                int personId = -1;
                if (int.TryParse(Session["id"].ToString(), out personId))
                {
                    foreach (var item in taskId)
                    {
                        string errMsg = "";
                        if (CraftDesignInfoManage.AcceptTask(item, personId, ref errMsg))
                        {
                            result.Add(errMsg);
                        }
                        else
                        {
                            result.Add(errMsg);
                        }
                    }
                }
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Content(ex.Message);
            }
        }

        /// <summary>
        /// 工艺责任人创建工序
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult CreateMachiningProcessByCraftPerson()
        {
            //CreateMachiningProcess(int taskID, int processNum, int createPersonID, int processTypeID, ref string errMsg
            try
            {
                var taskIDStr = Request["taskId"];//创建工序的零件ID
                var processNumStr = Request["processNum"];//工序号
                var processTypeIDStr = Request["processTypeId"];//工序类型ID，车 镗 磨


                var personIDStr = Session["id"];
                int taskId = -1;
                int processNum = -1;
                int processTypeId = -1;
                int personId = -1;
                if (int.TryParse(taskIDStr, out taskId) && int.TryParse(processNumStr, out processNum) && int.TryParse(processTypeIDStr, out processTypeId) && int.TryParse(personIDStr.ToString(), out personId))
                {
                    string errMsg = "";
                    if (CraftDesignInfoManage.CreateMachiningProcess(taskId, processNum, personId, processTypeId, ref errMsg))
                    {
                        return Content("ok");
                    }
                    else
                    {
                        return Content("创建失败," + errMsg);
                    }
                }
                else
                {
                    return Content("创建失败，请输入正确的Int数据类型！");
                }
            }
            catch (Exception ex)
            {
                return Content(ex.Message);
            }
        }
        /// <summary>
        /// 获取零件任务工序信息
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetPartsProcessInfoByPartTask()
        {
            try
            {
                var taskIdStr = Request["taskId"];//零件任务ID
                int taskId = -1;
                if (int.TryParse(taskIdStr, out taskId))
                {
                    var lisrResult = CraftDesignInfoManage.GetPartsProcessInfo(taskId);
                    return Json(new { code = 0, data = lisrResult }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Content("请输入正确的Int数据类型！");

                }
            }
            catch (Exception ex)
            {
                return Content(ex.Message);
            }
        }
        /// <summary>
        /// 删除工序
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult DeletePartsProcessMethod()
        {
            try
            {
                var processIdStr = Request["processId"];//工序主键ID
                var personIdStr = Session["id"];
                int processId = -1;
                int personId = -1;
                if (int.TryParse(processIdStr, out processId) && int.TryParse(personIdStr.ToString(), out personId))
                {
                    string errMsg = "";
                    if (CraftDesignInfoManage.DeletePartsProcess(processId, personId, ref errMsg))
                    {
                        return Content("ok");
                    }
                    else
                    {
                        return Content(errMsg);
                    }
                }
                else
                {
                    return Content("请输入正确的Int数据类型！");
                }
            }
            catch (Exception ex)
            {
                return Content(ex.Message);
            }
        }
        /// <summary>
        /// 修改工序信息
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult AlterPartsProcessMethod()
        {
            try
            {
                var processIdStr = Request["processId"];//修改的工序主键ID
                var processTypeIdStr = Request["processTypeId"];//加工类型  车  磨  镗  主键ID
                var personStr = Session["id"];
                int processId = -1;
                int processTypeId = -1;
                int personId = -1;
                if (int.TryParse(processIdStr, out processId) && int.TryParse(processTypeIdStr, out processTypeId) && int.TryParse(personStr.ToString(), out personId))
                {
                    string errMsg = "";
                    if (CraftDesignInfoManage.AlterPartsProcess(processId, personId, processTypeId, ref errMsg))
                    {
                        return Content("ok");
                    }
                    else
                    {
                        return Content(errMsg);
                    }


                }
                else
                {
                    return Content("请输入正确的Int数据类型！");
                }
            }
            catch (Exception ex)
            {
                return Content(ex.Message);
            }

        }
        /// <summary>
        /// 上传工艺过程卡，工艺进程单，其它文件
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult SaveTaskCraftFile()
        {
            var taskIdStr = Request["taskId"];//零件任务主键id
            var files = Request.Files;//文件
            var flag = Request["flag"];//文件标志位，”工艺过程卡“或者“工艺进程单”或者“其它文件”


            var personIdStr = Session["id"];//上传文件人员Id 
            int taskId = -1;
            int personId = -1;
            if (int.TryParse(taskIdStr, out taskId) && int.TryParse(personIdStr.ToString(), out personId))
            {
                if (flag.ToString() == "工艺过程卡")
                {
                    string errMsg = "";
                    if (CraftDesignInfoManage.UpdateTaskCraftFiles(taskId, personId, 0, ref errMsg))
                    {
                        SupplementaryInformation pathInfo = new SupplementaryInformation();
                        var pathTask = TaskInfoManage.GetTaskPath(taskId);
                        var dirPath = Path.Combine(pathInfo.upLoadPath(), pathTask, "工艺过程卡");
                        if (!Directory.Exists(dirPath))
                        {
                            Directory.CreateDirectory(dirPath);
                        }
                        for (int i = 0; i < files.Count; i++)
                        {
                            var filePath = Path.Combine(dirPath, files[i].FileName);
                            files[i].SaveAs(filePath);
                        }
                        return Content("ok");
                    }
                    else
                    {
                        return Content(errMsg);
                    }
                }
                else if (flag.ToString() == "工艺进程单")
                {
                    string errMsg = "";
                    if (CraftDesignInfoManage.UpdateTaskCraftFiles(taskId, personId, 1, ref errMsg))
                    {
                        SupplementaryInformation pathInfo = new SupplementaryInformation();
                        var pathTask = TaskInfoManage.GetTaskPath(taskId);
                        var dirPath = Path.Combine(pathInfo.upLoadPath(), pathTask, "工艺进程单");
                        if (!Directory.Exists(dirPath))
                        {
                            Directory.CreateDirectory(dirPath);
                        }
                        for (int i = 0; i < files.Count; i++)
                        {
                            var filePath = Path.Combine(dirPath, files[i].FileName);
                            files[i].SaveAs(filePath);
                        }
                        return Content("ok");
                    }
                    else
                    {
                        return Content(errMsg);
                    }
                }
                else if (flag.ToString() == "其它文件")
                {
                    string errMsg = "";
                    if (CraftDesignInfoManage.UpdateTaskCraftFiles(taskId, personId, 2, ref errMsg))
                    {
                        SupplementaryInformation pathInfo = new SupplementaryInformation();
                        var pathTask = TaskInfoManage.GetTaskPath(taskId);
                        var dirPath = Path.Combine(pathInfo.upLoadPath(), pathTask, "其它文件");
                        if (!Directory.Exists(dirPath))
                        {
                            Directory.CreateDirectory(dirPath);
                        }
                        for (int i = 0; i < files.Count; i++)
                        {
                            var filePath = Path.Combine(dirPath, files[i].FileName);
                            files[i].SaveAs(filePath);
                        }
                        return Content("ok");
                    }
                    else
                    {
                        return Content(errMsg);
                    }
                }
                else
                {
                    return Content("请输入正确的文件！");
                }
            }
            else
            {
                return Content("请输入正确的Int数据类型！");
            }
        }
        /// <summary>
        /// 获取工艺过程卡，工艺进程单，其它文件
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ReadTaskCraftFile()
        {

            var taskIdStr = Request["taskId"];//零件任务主键id
            var flag = Request["flag"];//文件标志位，”工艺过程卡“或者“工艺进程单”或者“其它文件”


            var personIdStr = Session["id"];//上传文件人员Id 
            int taskId = -1;
            int personId = -1;
            if (int.TryParse(taskIdStr, out taskId) && int.TryParse(personIdStr.ToString(), out personId))
            {
                if (flag.ToString() == "工艺过程卡")
                {
                    SupplementaryInformation pathInfo = new SupplementaryInformation();
                    var pathTask = TaskInfoManage.GetTaskPath(taskId);
                    var dirPath = Path.Combine(pathInfo.upLoadPath(), pathTask, "工艺过程卡");
                    List<FileInfoClass> fileInfos = new List<FileInfoClass>();
                    List<string> filesPath = new List<string>();
                    if (Directory.Exists(dirPath))
                    {
                        filesPath = Directory.GetFiles(dirPath).ToList();
                        foreach (var item in filesPath)
                        {
                            FileInfo fileinfo = new FileInfo(item);
                            FileInfoClass file = new FileInfoClass();
                            file.fileName = fileinfo.Name;
                            file.updateTime = fileinfo.LastWriteTime;
                            file.updateTimeStr = fileinfo.LastWriteTime.ToString().Substring(0, fileinfo.LastWriteTime.ToString().LastIndexOf(':'));
                            file.downloadPath = Path.Combine("JDJS_PDMS_Files", pathTask, "工艺过程卡", fileinfo.Name);
                            fileInfos.Add(file);

                        }
                    }
                    fileInfos = fileInfos.OrderByDescending(r => r.updateTime).ToList();
                    return Json(new { code = 0, data = fileInfos }, JsonRequestBehavior.AllowGet);

                }
                else if (flag.ToString() == "工艺进程单")
                {
                    SupplementaryInformation pathInfo = new SupplementaryInformation();
                    var pathTask = TaskInfoManage.GetTaskPath(taskId);
                    var dirPath = Path.Combine(pathInfo.upLoadPath(), pathTask, "工艺进程单");
                    List<FileInfoClass> fileInfos = new List<FileInfoClass>();
                    List<string> filesPath = new List<string>();
                    if (Directory.Exists(dirPath))
                    {
                        filesPath = Directory.GetFiles(dirPath).ToList();
                        foreach (var item in filesPath)
                        {
                            FileInfo fileinfo = new FileInfo(item);
                            FileInfoClass file = new FileInfoClass();
                            file.fileName = fileinfo.Name;
                            file.updateTime = fileinfo.LastWriteTime;
                            file.updateTimeStr = fileinfo.LastWriteTime.ToString().Substring(0, fileinfo.LastWriteTime.ToString().LastIndexOf(':'));
                            file.downloadPath = Path.Combine("JDJS_PDMS_Files", pathTask, "工艺进程单", fileinfo.Name);
                            fileInfos.Add(file);

                        }
                    }
                    fileInfos = fileInfos.OrderByDescending(r => r.updateTime).ToList();
                    return Json(new { code = 0, data = fileInfos }, JsonRequestBehavior.AllowGet);

                }
                else if (flag.ToString() == "其它文件")
                {
                    SupplementaryInformation pathInfo = new SupplementaryInformation();
                    var pathTask = TaskInfoManage.GetTaskPath(taskId);
                    var dirPath = Path.Combine(pathInfo.upLoadPath(), pathTask, "其它文件");
                    List<FileInfoClass> fileInfos = new List<FileInfoClass>();
                    List<string> filesPath = new List<string>();
                    if (Directory.Exists(dirPath))
                    {
                        filesPath = Directory.GetFiles(dirPath).ToList();
                        foreach (var item in filesPath)
                        {
                            FileInfo fileinfo = new FileInfo(item);
                            FileInfoClass file = new FileInfoClass();
                            file.fileName = fileinfo.Name;
                            file.updateTime = fileinfo.LastWriteTime;
                            file.updateTimeStr = fileinfo.LastWriteTime.ToString().Substring(0, fileinfo.LastWriteTime.ToString().LastIndexOf(':'));
                            file.downloadPath = Path.Combine("JDJS_PDMS_Files", pathTask, "其它文件", fileinfo.Name);
                            fileInfos.Add(file);

                        }
                    }
                    fileInfos = fileInfos.OrderByDescending(r => r.updateTime).ToList();
                    return Json(new { code = 0, data = fileInfos }, JsonRequestBehavior.AllowGet);

                }
                else
                {
                    return Content("请输入正确的文件！");
                }
            }
            else
            {
                return Content("请输入正确的Int数据类型！");
            }

        }

    }
}
